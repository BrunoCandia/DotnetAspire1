@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject Data.NwsManager NwsManager
@inject ILogger<Data.NwsManager> Logger
@rendermode InteractiveServer

<PageTitle>My Weather Hub</PageTitle>

<HeadContent>
	<style>

		.quickgrid {
			width: 100%;
		}

		.quickgrid td:has(span.selectedCell) {
			background-color: yellow;
		}
	</style>
</HeadContent>

<h1>My Weather Hub</h1>

<div style="width: 30em;">
	<QuickGrid Items="zones" TGridItem="Data.ZonesResponse.Feature" Pagination="pagination">
		<TemplateColumn Title="Name" SortBy="NameSort" Sortable="true">
			<ColumnOptions>
				<div class="search-box">
					<input type="search" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="Name..." />
				</div>
			</ColumnOptions>
			<ChildContent>
				<span class="link-primary @(SelectedZone == context ? "selectedCell" : "")" style="cursor: pointer;" @onclick="@(() => SelectZone(context))">@context.properties.name</span>
			</ChildContent>
		</TemplateColumn>
		<TemplateColumn Title="State">
			<ColumnOptions>
				<div class="search-box">
					<input type="search" autofocus @bind="StateFilter" @bind:event="oninput" placeholder="State..." />
				</div>
			</ColumnOptions>
			<ChildContent>
				<span class="@(SelectedZone == context ? "selectedCell" : "")">@context.properties.state</span>
			</ChildContent>
		</TemplateColumn>
	</QuickGrid>
	<Paginator State="@pagination"></Paginator>
</div>

@if (SelectedZone != null && Forecast != null)
{

	<h3>Weather for @SelectedZone.properties.name (@SelectedZone.properties.key)</h3>

	<div class="row row-cols-1 row-cols-md-4 g-4">
		@foreach (var forecast in Forecast.properties.periods.Take(8))
		{

			<div class="col">
				<div class="card">
					<div class="card-header">@forecast.name</div>
					<div class="card-body">@forecast.detailedForecast</div>
				</div>
			</div>

		}
	</div>

}
else if (SelectedZone != null && !string.IsNullOrEmpty(Error))
{
	<div class="alert-danger">@Error<br />Choose another weather station</div>
}

@code {

	IQueryable<Data.ZonesResponse.Feature> zones
	{
		get
		{

			var results = AllZones
				.Where(z => z.properties.observationStations.Any())
				.AsQueryable();

			results = string.IsNullOrEmpty(StateFilter) ? results.AsQueryable()
					: results.Where(z => z.properties.state == StateFilter.ToUpper()).AsQueryable();

			results = string.IsNullOrEmpty(NameFilter) ? results
					: results.Where(z => z.properties.name.Contains(NameFilter, StringComparison.InvariantCultureIgnoreCase));

			return results;

		}
	}

	Data.ZonesResponse.Feature[] AllZones { get; set; } = [];

	PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	string NameFilter { get; set; } = string.Empty;

	string StateFilter { get; set; } = string.Empty;

	GridSort<Data.ZonesResponse.Feature> NameSort = GridSort<Data.ZonesResponse.Feature>
			.ByAscending(f => f.properties.name);

	Data.ZonesResponse.Feature SelectedZone { get; set; } = null!;

	Data.ForecastResponse Forecast { get; set; } = null!;

	string Error { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		AllZones = (await NwsManager.GetZonesAsync()).features;
	}

	private async Task SelectZone(Data.ZonesResponse.Feature zone)
	{

		SelectedZone = zone;
		try
		{
			Forecast = await NwsManager.GetForecastAsync(zone.properties.key);
			Error = string.Empty;
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Error getting forecast for {0}({1})", zone.properties.name, zone.properties.key);
			Forecast = null!;
			Error = $"Unable to locate weather for {SelectedZone.properties.name}({SelectedZone.properties.key})";
		}

	}


}